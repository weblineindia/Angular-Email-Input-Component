{"version":3,"sources":["../../../projects/email/src/lib/email.service.ts","../../../projects/email/src/lib/email.component.ts","../../../projects/email/src/lib/email.module.ts"],"names":["Injectable","args","providedIn","EmailComponent","this","faPlus","faMinus","maxlength","emailFormateError","duplicateEmailError","name","id","disabled","value","isMultiple","placeholder","isShowPlus","tabindex","index","focus","EventEmitter","blur","change","onPlus","isError","isUniqueError","prototype","onChange","event","data","emit","onBlur","emailArray","_this","target","test","map","item","email","onFocus","onPlusClick","Component","selector","template","Input","Output","NgModule","declarations","imports","FontAwesomeModule","FormsModule","ReactiveFormsModule","CommonModule","exports"],"mappings":"mnBAOE,4HALDA,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,kECDd,SAAAC,IAMEC,KAAAC,OAAcA,EAAAA,OACdD,KAAAE,QAAeA,EAAAA,QAENF,KAAAG,UAAoB,GACpBH,KAAAI,kBAA4B,qBAC5BJ,KAAAK,oBAA8B,0BAC9BL,KAAAM,KAAe,GAEfN,KAAAO,GAAa,GACbP,KAAAQ,UAAoB,EACpBR,KAAAS,MAAgB,GAChBT,KAAAU,YAAsB,EACtBV,KAAAW,YAAsB,QACtBX,KAAAY,YAAsB,EACtBZ,KAAAa,SAAmB,EACnBb,KAAAc,MAAgB,EACfd,KAAAe,MAA2B,IAAIC,EAAAA,aAC/BhB,KAAAiB,KAA0B,IAAID,EAAAA,aAC9BhB,KAAAkB,OAA4B,IAAIF,EAAAA,aAChChB,KAAAmB,OAA4B,IAAIH,EAAAA,aAO1ChB,KAAAoB,SAAmB,EACnBpB,KAAAqB,eAAyB,SANzBtB,EAAAuB,UAAAC,SAAA,SAASC,EAAOV,GACd,IAAIW,EAAO,CAAED,MAAOA,EAAOV,MAAOA,GAClCd,KAAKkB,OAAOQ,KAAKD,IAMnB1B,EAAAuB,UAAAK,OAAA,SAAOH,EAAOjB,EAAIqB,GAAlB,IAAAC,EAAA7B,KAEE,GAA2B,KAAvBwB,EAAMM,OAAOrB,MAAc,CACL,iDACHsB,KAAKP,EAAMM,OAAOrB,QAGrCT,KAAKoB,SAAU,EACfQ,EAAWI,KAAI,SAACC,EAAMnB,GAChBA,IAAUP,IACR0B,EAAKC,QAAUV,EAAMM,OAAOrB,MAC9BoB,EAAKR,eAAgB,EAErBQ,EAAKR,eAAgB,OAR3BrB,KAAKoB,SAAU,EAcnBpB,KAAKiB,KAAKS,KAAKF,IAEjBzB,EAAAuB,UAAAa,QAAA,SAAQX,EAAOV,GACbd,KAAKe,MAAMW,KAAKF,IAElBzB,EAAAuB,UAAAc,YAAA,WACEpC,KAAKmB,OAAOO,iCA5DfW,EAAAA,UAASxC,KAAA,CAAC,CACTyC,SAAU,YACVC,SAAA,mhDAOCC,EAAAA,iCACAA,EAAAA,mCACAA,EAAAA,oBACAA,EAAAA,0BACAA,EAAAA,kBACAA,EAAAA,wBACAA,EAAAA,qBACAA,EAAAA,0BACAA,EAAAA,2BACAA,EAAAA,0BACAA,EAAAA,wBACAA,EAAAA,qBACAA,EAAAA,qBACAC,EAAAA,qBACAA,EAAAA,uBACAA,EAAAA,uBACAA,EAAAA,gBCTH,iCAVCC,EAAAA,SAAQ7C,KAAA,CAAC,CACR8C,aAAc,CAAC5C,GACf6C,QAAS,CACPC,EAAAA,kBACAC,EAAAA,YACAC,EAAAA,oBACAC,EAAAA,cAEFC,QAAS,CAAClD","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EmailService {\n\n  constructor() { }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { faPlus, faMinus } from '@fortawesome/free-solid-svg-icons';\n@Component({\n  selector: 'lib-email',\n  templateUrl: './email.component.html',\n  styleUrls: ['./email.component.css']\n})\nexport class EmailComponent {\n  faPlus: any = faPlus;\n  faMinus: any = faMinus;\n\n  @Input() maxlength: Number = 50;\n  @Input() emailFormateError: String = 'Email is not valid';\n  @Input() duplicateEmailError: String = 'Do not enter same email';\n  @Input() name: String = '';\n  @Input() emailArray: any;\n  @Input() id: String = '';\n  @Input() disabled: Boolean = false;\n  @Input() value: String = '';\n  @Input() isMultiple: Boolean = true;\n  @Input() placeholder: String = 'Email';\n  @Input() isShowPlus: Boolean = false;\n  @Input() tabindex: Number = 0;\n  @Input() index: Number = 0;\n  @Output() focus: EventEmitter<any> = new EventEmitter<any>();\n  @Output() blur: EventEmitter<any> = new EventEmitter<any>();\n  @Output() change: EventEmitter<any> = new EventEmitter<any>();\n  @Output() onPlus: EventEmitter<any> = new EventEmitter<any>();\n\n  onChange(event, index) {\n    let data = { event: event, index: index };\n    this.change.emit(data);\n  }\n\n  isError: Boolean = false;\n  isUniqueError: Boolean = false;\n\n  onBlur(event, id, emailArray) {\n    debugger;\n    if (event.target.value !== '') {\n      const validEmailRegex = /[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}/;\n      if (!validEmailRegex.test(event.target.value)) {\n        this.isError = true;\n      } else {\n        this.isError = false;\n        emailArray.map((item, index) => {\n          if (index !== id) {\n            if (item.email === event.target.value) {\n              this.isUniqueError = true;\n            } else {\n              this.isUniqueError = false;\n            }\n          }\n        });\n      }\n    }\n    this.blur.emit(event);\n  }\n  onFocus(event, index) {\n    this.focus.emit(event);\n  }\n  onPlusClick() {\n    this.onPlus.emit();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { EmailComponent } from './email.component';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms'; \nimport { CommonModule } from '@angular/common';\n\n\n\n@NgModule({\n  declarations: [EmailComponent],\n  imports: [\n    FontAwesomeModule,\n    FormsModule,                               \n    ReactiveFormsModule ,\n    CommonModule\n  ],\n  exports: [EmailComponent]\n})\nexport class EmailModule { }\n"]}